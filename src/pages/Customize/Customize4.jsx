import style from './Customize4.module.css'
import '../../components/NumTestBg.css'
import NavBarWrapper from '../../components/NavBarWrapper';
import CopyrightNotice from '../../components/CopyrightNotice'
import { useEffect, useState, useMemo, useRef } from 'react';
import CustomizeInfoModal from '../../components/Customize/CustomizeInfoModal';

import { generateBraceletLayout, calculateRadius, calculateBeadAngles } from '../../utils/generateBraceletLayout';

import { resultCrystalMap } from '../../utils/resultCrystalMap';

// import html2canvas from 'html2canvas'; 
import { renderBraceletToImage } from '../../utils/renderBraceletToImage'; // Ëá™Ë®ÇÂ∑•ÂÖ∑

// ‰∏≤Êé•Ë≥ºÁâ©Ëªä
import { useCart } from '../Shopping/CartContext';
import { useNavigate } from 'react-router-dom';


export default function Customize4() {
  // ‰∏≤Êé•Ë≥ºÁâ©Ëªä
  const { addToCart } = useCart();
  const navigate = useNavigate();

  const [agreeError, setAgreeError] = useState(false);

  const [showInfo, setShowInfo] = useState(true);


  const [selectedSize, setSelectedSize] = useState(8);  // Ê∞¥Êô∂Â§ßÂ∞è
  const [wristSize, setWristSize] = useState(16);       // ÊâãÂúç
  const [braceletBeads, setBraceletBeads] = useState([]);
  const [recommendedCrystal, setRecommendedCrystal] = useState([]);
  const hasSetDefaultMetal = useRef(false);


  //ÈÅ∏ÊìáÈáëÂ±¨Ëß∏ÁôºÊïôÂ≠∏ÂΩàÁ™ó
  const [selectedMetalImage, setSelectedMetalImage] = useState(null);
  const [showCrystalGuide, setShowCrystalGuide] = useState(false);
  const [hasClickedMetal, setHasClickedMetal] = useState(false);

  const handleSelectMetal = (metalImage) => {
    setSelectedMetalImage(metalImage);

    if (!hasClickedMetal) {
      setShowCrystalGuide(true);
      setHasClickedMetal(true);
    }
  };


  useEffect(() => {
    const shouldApply = sessionStorage.getItem('shouldApplyRecommend') === 'true';
    const designMode = sessionStorage.getItem('designMode');
    const crystalImage = sessionStorage.getItem('selectedCrystalImage');
    const metalImage = sessionStorage.getItem('selectedMetalImage');
    console.log('üî• ÈÄ≤‰æÜ Customize4ÔºåÂúñÁâáË∑ØÂæëÔºö');
    console.log('crystalImage:', crystalImage);
    console.log('metalImage:', metalImage);

    const layout = generateBraceletLayout(selectedSize, wristSize);


    const oldPlacement = { ...crystalPlacement };
    let filled;

    if (shouldApply && designMode === 'recommend' && crystalImage && metalImage) {
      console.log('üß© ÈÄ≤ÂÖ•Êé®Ëñ¶ÊµÅÁ®ã useEffect');
      // ‚úÖ Êé®Ëñ¶Ê®°Âºè‰∏ãÔºöÂ•óÁî®Êï¥Ê¢ùÂêå‰∏ÄÂºµÊ∞¥Êô∂Âúñ
      filled = layout.map((item) =>
        item === 'metal'
          ? { type: 'metal' }
          : { type: 'crystal', image: crystalImage }
      );

      const placement = {};
      filled.forEach((bead, i) => {
        if (bead.type === 'crystal') {
          placement[i] = bead.image;
        }
      });

      setCrystalPlacement(placement);
      setSelectedMetalImage(metalImage);
    } else {
      // ‚úÖ Ëá™Áî±Ê®°ÂºèÔºå‰øùÁïôÂéüÊú¨ÁöÑÊ∞¥Êô∂ÂúñÈÖçÁΩÆ
      filled = layout.map((item, i) => {
        if (item === 'metal') return { type: 'metal' };
        return {
          type: 'crystal',
          image: oldPlacement[i] || undefined,
        };
      });

      const newPlacement = {};
      filled.forEach((bead, i) => {
        if (bead.type === 'crystal' && bead.image) {
          newPlacement[i] = bead.image;
        }
      });

      setCrystalPlacement(newPlacement);
    }

    setBraceletBeads(filled);
  }, [selectedSize, wristSize]);






  const braceletRadius = useMemo(() => {
    return calculateRadius(wristSize) * 1.1;
  }, [wristSize]);

  const scale = 6;

  const beadAngles = useMemo(() => {
    return calculateBeadAngles(braceletBeads, selectedSize);
  }, [braceletBeads, selectedSize]);

  const [openPanel, setOpenPanel] = useState(null); // null Êàñ "measure", "result", "wiki", "note", "custom"
  const [selectedCategory, setSelectedCategory] = useState("ÈùàÊÄßÁõ¥Ë¶∫"); // È†êË®≠ÂàÜÈ°û

  const crystalData = {
    ÈùàÊÄßÁõ¥Ë¶∫: [
      "./images/S-CrystalSingle/crystal-kyanite.png",
      "./images/S-CrystalSingle/crystal-labradorite.png",
      "./images/S-CrystalSingle/crystal-lapislazuli.png",
      "./images/S-CrystalSingle/crystal-sodalite.png",
      "./images/S-CrystalSingle/crystal-bluecalcite.png",
      "./images/S-CrystalSingle/crystal-pietersite.png",
      "./images/S-CrystalSingle/crystal-tanzanite.png",
      "./images/S-CrystalSingle/crystal-amethyst.png",
      "./images/S-CrystalSingle/crystal-albite.png",
      "./images/S-CrystalSingle/crystal-moonstone.png",
      "./images/S-CrystalSingle/crystal-clearquartz.png"
    ],
    Â∞àÊ≥®Â∑•‰Ωú: [
      "./images/S-CrystalSingle/crystal-citrine.png",
      "./images/S-CrystalSingle/crystal-rutile-quartz.png",
      "./images/S-CrystalSingle/crystal-aquamarine.png",
      "./images/S-CrystalSingle/crystal-sodalite.png",
      "./images/S-CrystalSingle/crystal-purplefluorite.png",
      "./images/S-CrystalSingle/crystal-fluorite.png",
      "./images/S-CrystalSingle/crystal-hawkseye.png",
      "./images/S-CrystalSingle/crystal-tigerseye.png",
      "./images/S-CrystalSingle/crystal-green-phantom.png",
      "./images/S-CrystalSingle/crystal-carnelian.png"
    ],
    ÊÑõËàá‰∫∫Èöõ: [
      "./images/S-CrystalSingle/crystal-iolite.png",
      "./images/S-CrystalSingle/crystal-lilac-amethyst.png",
      "./images/S-CrystalSingle/crystal-pinkquartz.png",
      "./images/S-CrystalSingle/crystal-rosequartz.png",
      "./images/S-CrystalSingle/crystal-golden-strawberry-quartz.png",
      "./images/S-CrystalSingle/crystal-rubellite.png",
      "./images/S-CrystalSingle/crystal-rhodochrosite.png",
      "./images/S-CrystalSingle/crystal-carnelian.png",
      "./images/S-CrystalSingle/crystal-garnet.png",
      "./images/S-CrystalSingle/crystal-oceanjasper.png"

    ],
    ËÉΩÈáèÈò≤Ë≠∑: [
      "./images/S-CrystalSingle/crystal-blackobsidian.png",
      "./images/S-CrystalSingle/crystal-goldobsidian.png",
      "./images/S-CrystalSingle/crystal-blacktourmaline.png",
      "./images/S-CrystalSingle/crystal-snowflakeobsidian.png",
      "./images/S-CrystalSingle/crystal-silversheenobsidian.png",
      "./images/S-CrystalSingle/crystal-hematite.png",
      "./images/S-CrystalSingle/crystal-rhodochrosite.png",
      "./images/S-CrystalSingle/crystal-bloodstone.png",
      "./images/S-CrystalSingle/crystal-tridacna.png",
    ],
    ÊîæÈ¨ÜÂÜ•ÊÉ≥: [
      "./images/S-CrystalSingle/crystal-pinkcalcite.png",
      "./images/S-CrystalSingle/crystal-amethyst.png",
      "./images/S-CrystalSingle/crystal-iolite.png",
      "./images/S-CrystalSingle/crystal-hackmanite.png",
      "./images/S-CrystalSingle/crystal-celestite.png",
      "./images/S-CrystalSingle/crystal-angelite.png",
      "./images/S-CrystalSingle/crystal-sunstone.png",
      "./images/S-CrystalSingle/crystal-smokyquartz.png",
      "./images/S-CrystalSingle/crystal-greenfluorite.png",
      "./images/S-CrystalSingle/crystal-silversheenobsidian.png",

    ],
  };
  const crystalPrices = {
    "./images/S-CrystalSingle/crystal-kyanite.png": 200,
    "./images/S-CrystalSingle/crystal-labradorite.png": 150,
    "./images/S-CrystalSingle/crystal-lapislazuli.png": 160,
    "./images/S-CrystalSingle/crystal-sodalite.png": 150,
    "./images/S-CrystalSingle/crystal-bluecalcite.png": 120,
    "./images/S-CrystalSingle/crystal-pietersite.png": 300,
    "./images/S-CrystalSingle/crystal-tanzanite.png": 200,
    "./images/S-CrystalSingle/crystal-amethyst.png": 120,
    "./images/S-CrystalSingle/crystal-albite.png": 100,
    "./images/S-CrystalSingle/crystal-moonstone.png": 130,
    "./images/S-CrystalSingle/crystal-clearquartz.png": 100,

    "./images/S-CrystalSingle/crystal-citrine.png": 110,
    "./images/S-CrystalSingle/crystal-rutile-quartz.png": 180,
    "./images/S-CrystalSingle/crystal-aquamarine.png": 140,
    "./images/S-CrystalSingle/crystal-purplefluorite.png": 100,
    "./images/S-CrystalSingle/crystal-fluorite.png": 200,
    "./images/S-CrystalSingle/crystal-hawkseye.png": 130,
    "./images/S-CrystalSingle/crystal-tigerseye.png": 120,
    "./images/S-CrystalSingle/crystal-green-phantom.png": 170,
    "./images/S-CrystalSingle/crystal-carnelian.png": 100,

    "./images/S-CrystalSingle/crystal-iolite.png": 150,
    "./images/S-CrystalSingle/crystal-lilac-amethyst.png": 110,
    "./images/S-CrystalSingle/crystal-pinkquartz.png": 120,
    "./images/S-CrystalSingle/crystal-rosequartz.png": 150,
    "./images/S-CrystalSingle/crystal-golden-strawberry-quartz.png": 160,
    "./images/S-CrystalSingle/crystal-rubellite.png": 200,
    "./images/S-CrystalSingle/crystal-rhodochrosite.png": 190,
    "./images/S-CrystalSingle/crystal-garnet.png": 100,
    "./images/S-CrystalSingle/crystal-oceanjasper.png": 120,

    "./images/S-CrystalSingle/crystal-blackobsidian.png": 170,
    "./images/S-CrystalSingle/crystal-goldobsidian.png": 160,
    "./images/S-CrystalSingle/crystal-blacktourmaline.png": 220,
    "./images/S-CrystalSingle/crystal-snowflakeobsidian.png": 150,
    "./images/S-CrystalSingle/crystal-silversheenobsidian.png": 110,
    "./images/S-CrystalSingle/crystal-hematite.png": 190,
    "./images/S-CrystalSingle/crystal-bloodstone.png": 120,
    "./images/S-CrystalSingle/crystal-tridacna.png": 140,

    "./images/S-CrystalSingle/crystal-pinkcalcite.png": 190,
    "./images/S-CrystalSingle/crystal-hackmanite.png": 140,
    "./images/S-CrystalSingle/crystal-celestite.png": 130,
    "./images/S-CrystalSingle/crystal-angelite.png": 110,
    "./images/S-CrystalSingle/crystal-sunstone.png": 120,
    "./images/S-CrystalSingle/crystal-smokyquartz.png": 180,
    "./images/S-CrystalSingle/crystal-greenfluorite.png": 100
  };

  const metalPrices = {
    "./images/Custom/ball1.png": 200,
    "./images/Custom/ball2.png": 200,
    "./images/Custom/ball3.png": 200,
    "./images/Custom/ball4.png": 200,
    "./images/Custom/ball5.png": 400,
    "./images/Custom/ball6.png": 300,
  };

  //   const handleSelectMetal = (imgPath) => {
  //   const price = metalPrices[imgPath] || 0;
  //   setSelectedMetalImage({ image: imgPath, price });
  // };

  const categorizedCrystalInfo = {
    "ÈùàÊÄßÁõ¥Ë¶∫": [
      {
        name: "ËóçÊô∂Áü≥",
        en: "Kyanite",
        image: "./images/S-CrystalSingle/crystal-kyanite.png",
        desc: "ÊèêÂçáÁõ¥Ë¶∫ËàáÈùàÊÄßÔºåÂπ´Âä©Ê∏ÖÊô∞Ê∫ùÈÄöËàáËÉΩÈáèÊµÅÂãï„ÄÇ"
      },
      {
        name: "ÊãâÈï∑Áü≥",
        en: "Labradorite",
        image: "./images/S-CrystalSingle/crystal-labradorite.png",
        desc: "ÂñöÈÜíÊΩõËÉΩÔºåÂ¢ûÂº∑Áõ¥Ë¶∫ËàáÈùàÊÄßÊé¢Á¥¢„ÄÇ"
      },
      {
        name: "ÈùíÈáëÁü≥",
        en: "Lapis Lazuli",
        image: "./images/S-CrystalSingle/crystal-lapislazuli.png",
        desc: "ÈñãÂïüÁ¨¨‰∏âÁúºÔºåÂ¢ûÈÄ≤Ê¥ûÂØüÂäõËàáÈùàÊÄß„ÄÇ"
      },
      {
        name: "ËòáÊâìÁü≥",
        en: "Sodalite",
        image: "./images/S-CrystalSingle/crystal-sodalite.png",
        desc: "ÁêÜÊÄßËàáÁõ¥Ë¶∫ÁöÑÂπ≥Ë°°ÔºåÂπ´Âä©Ê∏ÖÊô∞ÊÄùËÄÉ„ÄÇ"
      },
      {
        name: "ËóçÊñπËß£Áü≥",
        en: "Blue Calcite",
        image: "./images/S-CrystalSingle/crystal-bluecalcite.png",
        desc: "ËàíÁ∑©ÊÉÖÁ∑í„ÄÅÊèêÂçáË°®ÈÅîËàáÈùàÊÄßË¶∫ÂØü„ÄÇ"
      },
      {
        name: "ÂΩºÂæóÁü≥",
        en: "Pietersite",
        image: "./images/S-CrystalSingle/crystal-pietersite.png",
        desc: "ÊøÄÁôºÊ¥ûÂØüËàáÊÑèÂøóÂäõÔºåÊúâÂä©Áõ¥Ë¶∫Ë°åÂãï„ÄÇ"
      },
      {
        name: "‰∏πÊ≥âÁü≥",
        en: "Tanzanite",
        image: "./images/S-CrystalSingle/crystal-tanzanite.png",
        desc: "ÈñãÂïüÈ´òÈ†ªËÉΩÈáèÈÄöÈÅìÔºåÂº∑ÂåñÁõ¥Ë¶∫ËàáÂâµÈÄ†Âäõ„ÄÇ"
      },
      {
        name: "Á¥´Ê∞¥Êô∂",
        en: "Amethyst",
        image: "./images/S-CrystalSingle/crystal-amethyst.png",
        desc: "ÂçîÂä©Â∞àÊ≥®ËàáÊÉÖÁ∑íÂπ≥Ë°°ÔºåÊèêÂçáÈùàÊÄßÁõ¥Ë¶∫„ÄÇ"
      },
      {
        name: "ÁôΩÊúàÂÖâÈà£Èï∑Áü≥",
        en: "Albite",
        image: "./images/S-CrystalSingle/crystal-albite.png",
        desc: "Â∏∂‰æÜÊæÑÊæàÁöÑÈùàÊÑüËàáËΩâÂåñÊîØÊåÅÔºåÂπ´Âä©ÈáãÊîæÈôêÂà∂„ÄÇ"
      },
      {
        name: "ÊúàÂÖâÁü≥",
        en: "Moonstone",
        image: "./images/S-CrystalSingle/crystal-moonstone.png",
        desc: "Á©©ÂÆöÊÉÖÁ∑íËàáÁù°Áú†ÔºåÊúâÂä©ÈÄ£ÁµêÁõ¥Ë¶∫ËàáÈùàÊÑü„ÄÇ"
      },
      {
        name: "ÁôΩÊ∞¥Êô∂",
        en: "Clear Quartz",
        image: "./images/S-CrystalSingle/crystal-clearquartz.png",
        desc: "ÊîæÂ§ßËÉΩÈáèÔºåÂçîÂä©ÈùàÊÄßÊèêÂçáËàáÊ∑®Âåñ„ÄÇ"
      }
    ],
    "Â∞àÊ≥®Â∑•‰Ωú": [
      {
        name: "ÈªÉÊ∞¥Êô∂",
        en: "Citrine",
        image: "./images/S-CrystalSingle/crystal-citrine.png",
        desc: "ÊèêÂçáË≤°ÂØåËàáËá™‰ø°ÔºåÂ∏∂‰æÜÊ∏ÖÊô∞ËàáË°åÂãïÂäõ„ÄÇ"
      },
      {
        name: "Èà¶Êô∂/È´ÆÊô∂",
        en: "Rutile Quartz",
        image: "./images/S-CrystalSingle/crystal-rutile-quartz.png",
        desc: "Â¢ûÂº∑‰ºÅÂúñÂøÉËàáÊïàÁéáÔºåÂê∏Âºï‰∫∫ËÑàË≥áÊ∫ê„ÄÇ"
      },
      {
        name: "Êµ∑ËóçÂØ∂",
        en: "Aquamarine",
        image: "./images/S-CrystalSingle/crystal-aquamarine.png",
        desc: "ÊèêÂçáË°®ÈÅîËàáÂÜ∑ÈùúÊÄùËÄÉÔºåÂ∏∂‰æÜÊ∏ÖÊñ∞ËÉΩÈáè„ÄÇ"
      },
      {
        name: "ËòáÊâìÁü≥",
        en: "Sodalite",
        image: "./images/S-CrystalSingle/crystal-sodalite.png",
        desc: "Âπ≥Ë°°ÈÇèËºØËàáÁõ¥Ë¶∫ÔºåÂçîÂä©Â∞àÊ≥®ËàáÊ∏ÖÊô∞ÊÄùÁ∂≠„ÄÇ"
      },
      {
        name: "Á¥´Ëû¢Áü≥",
        en: "Purple Fluorite",
        image: "./images/S-CrystalSingle/crystal-purplefluorite.png",
        desc: "Á©©ÂÆöÊÉÖÁ∑íËàáÂ∞àÊ≥®ÂäõÔºåÊøÄÁôºÂâµÈÄ†ÈùàÊÑü„ÄÇ"
      },
      {
        name: "Ëû¢Áü≥",
        en: "Fluorite",
        image: "./images/S-CrystalSingle/crystal-fluorite.png",
        desc: "ÂçîÂä©ÁµÑÁπîÊÄùÁ∑íÔºåÊèêÂçáÂ≠∏ÁøíÊïàÁéá„ÄÇ"
      },
      {
        name: "È∑πÁúºÁü≥",
        en: "Hawk‚Äôs Eye",
        image: "./images/S-CrystalSingle/crystal-hawkseye.png",
        desc: "Ê¥ûÂØüÂÖàÊ©ü„ÄÅÊèêÂçáÂà§Êñ∑ÂäõËàáÂü∑Ë°åÂäõ„ÄÇ"
      },
      {
        name: "ËôéÁúºÁü≥",
        en: "Tiger‚Äôs Eye",
        image: "./images/S-CrystalSingle/crystal-tigerseye.png",
        desc: "Â∏∂‰æÜÊ±∫Êñ∑ÂäõËàáÂãáÊ∞£ÔºåÂπ´Âä©ÂØ¶ÁèæÁõÆÊ®ô„ÄÇ"
      },
      {
        name: "Á∂†ÂπΩÈùà",
        en: "Green Phantom",
        image: "./images/S-CrystalSingle/crystal-green-phantom.png",
        desc: "ÊîØÊåÅ‰∫ãÊ•≠ÁôºÂ±ïÔºåÂπ´Âä©ÈáãÊîæË≤†Èù¢ËÉΩÈáè„ÄÇ"
      },
      {
        name: "Á¥ÖÁéâÈ´ì",
        en: "Carnelian",
        image: "./images/S-CrystalSingle/crystal-carnelian.png",
        desc: "Ê≥®ÂÖ•Ê¥ªÂäõËàáË°åÂãïÂäõÔºåÊøÄÁôºÂâµÈÄ†ËàáÁÜ±ÊÉÖ„ÄÇ"
      }
    ],
    "ÊÑõËàá‰∫∫Èöõ": [
      {
        name: "Â†áÈùíÁü≥",
        en: "Iolite",
        image: "./images/S-CrystalSingle/crystal-iolite.png",
        desc: "Âπ´Âä©ÈáêÊ∏ÖÊ∑∑‰∫ÇÊÄùÁ∑í„ÄÅÂº∑ÂåñÂÖßÂú®Â∞éÂºïÔºå‰øÉÈÄ≤ÁúüË™†Ê∫ùÈÄöËàáÂøÉÈùàÈÄ£Áµê„ÄÇ"
      },
      {
        name: "Á≤âÁ¥´Ê∞¥Êô∂",
        en: "Lilac Amethyst",
        image: "./images/S-CrystalSingle/crystal-lilac-amethyst.png",
        desc: "Ê∫´ÂíåÊ∑®ÂåñÊÉÖÁ∑íÔºåÊüîÂåñÂÖßÂú®ËÉΩÈáè„ÄÇ"
      },
      {
        name: "Á≤âÊô∂",
        en: "Rose Quartz",
        image: "./images/S-CrystalSingle/crystal-rosequartz.png",
        desc: "ÈñãÂïüÂøÉËº™ÔºåÊèêÂçáÊÑõËàáË¢´ÊÑõÁöÑËÉΩÂäõ„ÄÇ"
      },
      {
        name: "ËçâËéìÊô∂",
        en: "Strawberry Quartz",
        image: "./images/S-CrystalSingle/crystal-golden-strawberry-quartz.png",
        desc: "Âê∏ÂºïÁæéÂ•ΩÈóú‰øÇËàáÊÑõÊÉÖ„ÄÇ"
      },
      {
        name: "Á¥ÖÁ¢ßÁíΩ",
        en: "Rubellite",
        image: "./images/S-CrystalSingle/crystal-rubellite.png",
        desc: "Âº∑ÂåñÊÉÖÊÑüË°®ÈÅîÔºåÊèêÂçá‰∫∫ÈöõÈ≠ÖÂäõ„ÄÇ"
      },
      {
        name: "Á¥ÖÁ¥ãÁü≥",
        en: "Rhodochrosite",
        image: "./images/S-CrystalSingle/crystal-rhodochrosite.png",
        desc: "ÁôÇÁôíÊÉÖÊÑüÂâµÂÇ∑ÔºåÂçîÂä©ÊâìÈñãÂøÉÊââ„ÄÇ"
      },
      {
        name: "Á¥ÖÁü≥Ê¶¥Áü≥",
        en: "Garnet",
        image: "./images/S-CrystalSingle/crystal-garnet.png",
        desc: "ÊøÄÁôºÊÉÖÊÑüÊ¥ªÂäõ‰∏¶ÊèêÂçáÂÆâÂÖ®ÊÑü„ÄÇ"
      },
      {
        name: "Êµ∑Ê¥ãÁ¢ßÁéâ",
        en: "Ocean Jasper",
        image: "./images/S-CrystalSingle/crystal-oceanjasper.png",
        desc: "Á©©ÂÆöÊÉÖÁ∑íËàáÂíåË´ß‰∫§ÊµÅ„ÄÇ"
      }
    ],
    "ËÉΩÈáèÈò≤Ë≠∑": [
      {
        name: "ÈªëÊõúÁü≥",
        en: "Black Obsidian",
        image: "./images/S-CrystalSingle/crystal-blackobsidian.png",
        desc: "Âê∏Êî∂Ë≤†ËÉΩÈáèÔºåÂº∑Âåñ‰øùË≠∑Â†¥Âüü„ÄÇ"
      },
      {
        name: "ÈáëÊõúÁü≥",
        en: "Gold Obsidian",
        image: "./images/S-CrystalSingle/crystal-goldobsidian.png",
        desc: "ÊèêÂçáÁõ¥Ë¶∫ËàáÈò≤Ë≠∑ËÉΩÈáè„ÄÇ"
      },
      {
        name: "ÈªëÁ¢ßÁíΩ",
        en: "Black Tourmaline",
        image: "./images/S-CrystalSingle/crystal-blacktourmaline.png",
        desc: "Á©©ÂÆöÊÉÖÁ∑íËàáÈò≤Ê≠¢Ë≤†ËÉΩÈáèÂÖ•‰æµ„ÄÇ"
      },
      {
        name: "Èõ™Ëä±ÈªëÊõúÁü≥",
        en: "Snowflake Obsidian",
        image: "./images/S-CrystalSingle/crystal-snowflakeobsidian.png",
        desc: "Ê∑®ÂåñÂÖßÂú®Èô∞ÂΩ±ÔºåÂ∏∂‰æÜÊ∏ÖÊô∞ËàáÂπ≥Ë°°„ÄÇ"
      },
      {
        name: "ÈªëÈäÄÊõúÁü≥",
        en: "Silver Sheen Obsidian",
        image: "./images/S-CrystalSingle/crystal-silversheenobsidian.png",
        desc: "‰øùË≠∑ÈùàÊÄßÁ©∫ÈñìÔºåÂçîÂä©Ëá™ÊàëË™çË≠ò„ÄÇ"
      },
      {
        name: "ÈªëÈêµÁ§¶",
        en: "Hematite",
        image: "./images/S-CrystalSingle/crystal-hematite.png",
        desc: "Âº∑ÂåñÁ≤æÁ•ûÁ©©ÂÆöÊÄßËàáÂØ¶ÈöõË°åÂãïÂäõ„ÄÇ"
      },
      {
        name: "Á¥ÖÁ¥ãÁü≥",
        en: "Rhodochrosite",
        image: "./images/S-CrystalSingle/crystal-rhodochrosite.png",
        desc: "ÂÆâÊí´ÊÉÖÁ∑íÂâµÂÇ∑ÔºåÂª∫Á´ãÊüîÈüåÁöÑËÉΩÈáèÈò≤Á∑ö„ÄÇ"
      },
      {
        name: "ÈæçË°ÄÁü≥",
        en: "Bloodstone",
        image: "./images/S-CrystalSingle/crystal-bloodstone.png",
        desc: "‰øÉÈÄ≤ÂãáÊ∞£ËàáË∫´ÂøÉÊ∑®Âåñ„ÄÇ"
      },
      {
        name: "Á°®Á£≤Áü≥",
        en: "Tridacna",
        image: "./images/S-CrystalSingle/crystal-tridacna.png",
        desc: "Â∏∂‰æÜÁ¥îÊ∑®ËÉΩÈáèÔºåÊ∏ÖÈô§ÈõúÂøµËàáÁÑ¶ÊÖÆ„ÄÇ"
      }
    ]
    ,
    "ÊîæÈ¨ÜÂÜ•ÊÉ≥": [
      {
        name: "Á≤âÊñπËß£Áü≥",
        en: "Pink Calcite",
        image: "./images/S-CrystalSingle/crystal-pinkcalcite.png",
        desc: "ÊüîÂåñÂÖßÂøÉ„ÄÅÈáãÊîæÂ£ìÂäõËàáÊÉÖÁ∑í„ÄÇ"
      },
      {
        name: "Á¥´Ê∞¥Êô∂",
        en: "Amethyst",
        image: "./images/S-CrystalSingle/crystal-amethyst.png",
        desc: "ÂçîÂä©Â∞àÊ≥®ËàáÊÉÖÁ∑íÂπ≥Ë°°ÔºåÊèêÂçáÈùàÊÄßÁõ¥Ë¶∫„ÄÇ"
      },
      {
        name: "Â†áÈùíÁü≥",
        en: "Iolite",
        image: "./images/S-CrystalSingle/crystal-iolite.png",
        desc: "Âπ´Âä©ÂÜ•ÊÉ≥ËàáÂÖßÂú®ÊóÖÁ®ãÁöÑÊé¢Á¥¢„ÄÇ"
      },
      {
        name: "ÊñπÈàâÁü≥",
        en: "Hackmanite",
        image: "./images/S-CrystalSingle/crystal-hackmanite.png",
        desc: "Â∏∂‰æÜÂπ≥ÈùúËàáÂÆâÂøÉÔºåÊúâÂä©ÂÖßÁúÅ„ÄÇ"
      },
      {
        name: "Â§©ÈùíÁü≥",
        en: "Celestite",
        image: "./images/S-CrystalSingle/crystal-celestite.png",
        desc: "ÂÆâÊí´ÁÑ¶ÊÖÆÔºåÈÄ£ÁµêÊõ¥È´òÈ†ªÈùàÊÄß„ÄÇ"
      },
      {
        name: "Â§©‰ΩøÁü≥",
        en: "Angelite",
        image: "./images/S-CrystalSingle/crystal-angelite.png",
        desc: "‰øÉÈÄ≤Âπ≥ÈùúËàáÂÖßÂú®ÈÄ£Áµê„ÄÇ"
      },
      {
        name: "Â§™ÈôΩÁü≥",
        en: "Sunstone",
        image: "./images/S-CrystalSingle/crystal-sunstone.png",
        desc: "ÊøÄÁôºÊ≠£ËÉΩÈáèËàáÂø´Ê®ÇÊÑü„ÄÇ"
      },
      {
        name: "Ëå∂Êô∂",
        en: "Smoky Quartz",
        image: "./images/S-CrystalSingle/crystal-smokyquartz.png",
        desc: "ÈáãÊîæÂ£ìÂäõËàáÊÉÖÁ∑íÊØíÁ¥†„ÄÇ"
      },
      {
        name: "Á∂†Ëû¢Áü≥",
        en: "Green Fluorite",
        image: "./images/S-CrystalSingle/crystal-greenfluorite.png",
        desc: "Á©©ÂÆöÊÄùÁ∑íËàáÊÉÖÁ∑íÔºåÊúâÂä©ÊîæÈ¨Ü„ÄÇ"
      },
      {
        name: "ÈªëÈäÄÊõúÁü≥",
        en: "Silver Sheen Obsidian",
        image: "./images/S-CrystalSingle/crystal-silversheenobsidian.png",
        desc: "‰øÉÈÄ≤ÂÜ•ÊÉ≥Ëàá‰øùË≠∑ÈùàÊÄß„ÄÇ"
      }
    ]
  };


  const [selectedCrystal, setSelectedCrystal] = useState(null); // ÈÅ∏‰∏≠ÁöÑÊ∞¥Êô∂Âúñ
  const [selectedBeadIndexes, setSelectedBeadIndexes] = useState([]); // Â§öÂÄãÈÅ∏‰∏≠ÁöÑ bead index
  const [crystalPlacement, setCrystalPlacement] = useState({}); // index Â∞çÊáâÁöÑÊ∞¥Êô∂Âúñ

  // Èªû beadÔºàÊ†ºÂ≠êÔºâ
  const handleBeadClick = (index) => {
    if (braceletBeads[index] === 'metal') return;

    // Â∑≤ÈÅ∏Ê∞¥Êô∂ ‚Üí ÊîæÈÄ≤Âéª
    if (selectedCrystal) {
      setCrystalPlacement(prev => ({
        ...prev,
        [index]: selectedCrystal
      }));
      setSelectedCrystal(null);
      setSelectedBeadIndexes([]);
      return;
    }

    // Ê≤íÈÅ∏Ê∞¥Êô∂ ‚Üí Â§öÈÅ∏Ê°ÜÊ°ÜÈÇèËºØ
    if (selectedBeadIndexes.includes(index)) {
      // Â∑≤ÈÅ∏‰∏≠ ‚Üí ÂèñÊ∂àÈÅ∏Âèñ
      setSelectedBeadIndexes(prev => prev.filter(i => i !== index));
    } else {
      // Êú™ÈÅ∏‰∏≠ ‚Üí Âä†ÂÖ•ÈÅ∏Âèñ
      setSelectedBeadIndexes(prev => [...prev, index]);
    }
  };

  // ÈªûÊ∞¥Êô∂
  const handleCrystalSelect = (crystal) => {
    setSelectedCrystal(crystal);

    if (Array.isArray(selectedBeadIndexes) && selectedBeadIndexes.length > 0) {
      const updatedPlacement = { ...crystalPlacement };
      selectedBeadIndexes.forEach((i) => {
        updatedPlacement[i] = crystal;
      });
      setCrystalPlacement(updatedPlacement);

      // Ê∏ÖÁ©∫ÈÅ∏ÂèñÁãÄÊÖã
      setSelectedBeadIndexes([]);
      setSelectedCrystal(null);
    }
  };


  useEffect(() => {
    if (selectedCrystal && selectedBeadIndexes !== null) {
      setCrystalPlacement(prev => ({
        ...prev,
        [selectedBeadIndexes]: selectedCrystal
      }));
      setSelectedCrystal(null);
      setSelectedBeadIndexes(null);
    }
  }, [selectedCrystal, selectedBeadIndexes]);

  //Âà™Èô§ÊåâÈàï Ê∏ÖÁ©∫ÊâãÈçä
  const handleClearBracelet = () => {
    sessionStorage.removeItem('shouldApplyRecommend');

    // ÈáçÂª∫‰∫§ÈåØ layoutÔºå‰ΩÜ‰∏çÈôÑÂúñ
    const layout = generateBraceletLayout(selectedSize, wristSize);
    console.log('üßµ layout:', layout);
    const cleared = layout.map((item) =>
      item === 'metal'
        ? { type: 'metal' }
        : { type: 'crystal', image: undefined }
    );

    setBraceletBeads(cleared);
    setCrystalPlacement({});
    setSelectedBeadIndexes([]);
    setSelectedCrystal(null);
    setSelectedMetalImage(null);
  };

  //ÂÑ≤Â≠ò
  const [showCustomModal, setShowCustomModal] = useState(false);
  const [braceletName, setBraceletName] = useState('');
  const [braceletPrice, setBraceletPrice] = useState('');
  const handleSaveBracelet = () => {
    const savedData = {
      braceletName,
      wristSize,
      selectedSize,
      crystalPlacement,
      selectedMetalImage,
      braceletPrice,
      createdAt: new Date().toISOString(),
    };

    localStorage.setItem('customBracelet', JSON.stringify(savedData));
    setShowCustomModal(true); // È°ØÁ§∫ÂΩàÁ™ó
  };

  useEffect(() => {
    const saved = localStorage.getItem('customBracelet');
    if (saved) {
      const parsed = JSON.parse(saved);
      setBraceletName(parsed.braceletName || '');
      setWristSize(parsed.wristSize || 16);
      setSelectedSize(parsed.selectedSize || 8);
      setCrystalPlacement(parsed.crystalPlacement || {});
      setSelectedMetalImage(parsed.selectedMetalImage || null);
      setBraceletPrice(parsed.braceletPrice || '');
    }
  }, []);


  //Ë®àÁÆóÂÉπÊ†º
  useEffect(() => {
    let total = 0;

    // Ë®àÁÆóÊ∞¥Êô∂ÂÉπÊ†º
    braceletBeads.forEach((bead, index) => {
      if (crystalPlacement[index]) {
        const price = crystalPrices[crystalPlacement[index]] || 0;
        total += price;
      }
    });

    // Âä†‰∏äÈáëÂ±¨Áè†ÂÉπÊ†ºÔºàselectedMetalImage ÊòØÂ≠ó‰∏≤Ôºâ
    if (selectedMetalImage) {
      total += metalPrices[selectedMetalImage] || 0;
    }

    setBraceletPrice(total);
  }, [braceletBeads, crystalPlacement, selectedMetalImage]);


  //ÂèñÂæóÁîüÂëΩÈùàÊï∏ÁµêÊûúÂ∞éÂÖ•Êé®Ëñ¶Ê∞¥Êô∂
  const [lifePathNumber, setLifePathNumber] = useState(null);

  useEffect(() => {
    const storedLifePath = sessionStorage.getItem('lifePathNumber');
    if (storedLifePath) {
      setLifePathNumber(Number(storedLifePath));
    }
  }, []);


  //ÁâπÊÆäË®ÇË£ΩÈúÄÊ±Ç
  const [customRequest, setCustomRequest] = useState('');

  //Âè≥ÂÅ¥ÊåâÈàïÈªûÊìäÊïàÊûú
  const [activePanel, setActivePanel] = useState(null);
  const handlePanelClick = (panelName) => {
    // Âº∑Âà∂ÈáçËß∏ÂãïÁï´ÔºöÊØèÊ¨°ÈªûÊìäÈÉΩÊúÉÂÖàË®≠ null ÂÜçË®≠ÂÄº
    setOpenPanel(null);
    setActivePanel(panelName); // ‰∏çË¶ÅË®≠ nullÔºåÈÄôÊ®£ icon ÈÇÑÊúÉ‰∫Æ
    setTimeout(() => {
      setOpenPanel(panelName);
    }, 20); // Â∞èÂª∂ÈÅ≤ËÆì React ÊúâÊôÇÈñì unmount
  };


  //ÊòØÂê¶Ê∏ÖÈô§ÁöÑmodal
  const [showConfirmModal, setShowConfirmModal] = useState(false);
  const handleConfirmClear = () => {
    handleClearBracelet();
    setShowConfirmModal(false); // ÈóúÊéâ modal
  };

  //Â±ïÈñãÊ∞¥Êô∂ÁôæÁßëÂàÜÈ°û
  const [expandedCategories, setExpandedCategories] = useState([]);

  const toggleCategory = (category) => {
    setExpandedCategories((prev) =>
      prev.includes(category)
        ? prev.filter((c) => c !== category)
        : [...prev, category]
    );
  };


  //ÊääÊâãÈçäÂä†ÂÖ•Ë≥ºÁâ©Ëªä
  const [showCartModal, setShowCartModal] = useState(false);
  const [agreedToTerms, setAgreedToTerms] = useState(false);
  const [previewImage, setPreviewImage] = useState(null); // for ÊâãÈçäÊà™Âúñ
  const [showIncompleteModal, setShowIncompleteModal] = useState(false);
  const handleAddToCart = async () => {
    // Ê™¢Êü•ÊòØÂê¶ÊéíÊªø
    const allFilled = braceletBeads.every((bead, index) => {
      return bead.type === 'metal' || (bead.type === 'crystal' && crystalPlacement[index]);
    });

    if (!allFilled) {
      setShowIncompleteModal(true); // ÊâìÈñãÂΩàÁ™ó
      return;
    }

    // ÂåØÂá∫‰πæÊ∑®ÊâãÈçäÂúñÔºàÈùûÊà™ÂúñÔºâ
    const imageDataUrl = await renderBraceletToImage({
      braceletBeads,
      crystalPlacement,
      selectedMetalImage,
      selectedSize,
      wristSize,
    });

    setPreviewImage(imageDataUrl);
    setShowCartModal(true);
  };

  // ‰∏≤Êé•Ë≥ºÁâ©Ëªä
  const calcBraceletPrice = () => {
    let total = 0;

    // 1. Á¥ØÂä†ÊØèÈ°ÜÊ∞¥Êô∂ÂñÆÂÉπ
    braceletBeads.forEach((bead, idx) => {
      if (crystalPlacement[idx]) {
        total += crystalPrices[crystalPlacement[idx]] || 0;
      }
    });

    // 2. Âä†‰∏äÈáëÂ±¨Áè†
    if (selectedMetalImage) {
      total += metalPrices[selectedMetalImage] || 0;
    }

    return total;
  };

  return (
    <>
      <CustomizeInfoModal isOpen={showInfo} onClose={() => setShowInfo(false)} />
      <NavBarWrapper variant="dark" />

      <main className={style.index}>
        <div className={style.preload} />
        <div className={style.boxs}>
          <div className={style.name}>
            <div className={style.titleName}>
              <p>‚ú¶ Âπ´ÊàëÂèñÂÄãÂêçÂêß ‚ú¶</p>
            </div>
            <div className={style.inputNameBox}>
              <input
                type="text"
                className={style.inputName}
                value={braceletName}
                onChange={(e) => setBraceletName(e.target.value)}
                placeholder="ÔºçË´ãËº∏ÂÖ•ÊâãÈçäÂêçÁ®±Ôºç"
              />
            </div>
          </div>

          <div className={style.sizeAndBeads}>



            <div className={style.sizeBox}>
              <div className={style["title-size"]}>
                <p>Â∞∫ÂØ∏Ë®≠ÂÆö</p>
              </div>
              <hr className={style.line} />
              <div className={style.crystalSizeBox}>
                <div className={style.crystalSize}>
                  <p>Ê∞¥Êô∂Â§ßÂ∞èÔºö</p>
                </div>
                <div className={style.crystalSizeButtons}>
                  {[8, 10].map(size => (
                    <button
                      key={size}
                      className={`${style.button} ${selectedSize === size ? style.active : ''}`}
                      onClick={() => setSelectedSize(size)}
                    >
                      {size}mm
                    </button>
                  ))}
                </div>
              </div><div className={style.ringSizeBox}>
                <div className={style.ringSize}>
                  <p>ÊâãÂúçÂ∞∫ÂØ∏Ôºö</p>
                </div>
                <div className={style.ringSizeSlider}>
                  <input
                    type="range"
                    className={style.sliderInput}
                    min="13"
                    max="18"
                    step="1"
                    value={wristSize}
                    onChange={(e) => setWristSize(Number(e.target.value))}
                  />
                </div>
                <div className={style.ringSizeValueBox}>
                  <p className={style.sizeValue}>{wristSize}cm</p>
                </div>
              </div>
              <div className={style.ringJewelryBox}>
                <div className={style.ringJewelry}>
                  <p>ÊâãÈçäÈÖçÈ£æÔºö</p>
                </div>
                <div className={style.imagesBox}>
                  {["ball1", "ball2", "ball3", "ball4", "ball5", "ball6"].map((img, i) => (
                    <img
                      key={i}
                      src={`./images/Custom/${img}.png`}
                      alt=""
                      onClick={() => handleSelectMetal(`./images/Custom/${img}.png`)}
                    />
                  ))}
                </div>
              </div>
            </div>
          </div>


          <div id={style.beadWindow}>
            <nav className={style.tabs}>
              {Object.keys(crystalData).map((category) => (
                <button
                  key={category}
                  className={`${style.tab} ${selectedCategory === category ? style.active : ""}`}
                  onClick={() => setSelectedCategory(category)}
                >
                  {category}
                </button>
              ))}
            </nav>
            <div className={style.beadGrid}>
              {crystalData[selectedCategory].map((imgSrc, index) => (
                <img
                  key={index}
                  className={`${style.bead} ${selectedCrystal === imgSrc ? style.selectedBead : ''}`}
                  src={imgSrc}
                  alt=""
                  onClick={() => handleCrystalSelect(imgSrc)}
                />

              ))}
            </div>
          </div>
        </div>
        <div className={style.boxs3}>
          <div className={style.boxs2}>
            <div className={style.bracelet}
              style={{
                width: `${braceletRadius * 2 * scale}px`,
                height: `${braceletRadius * 2 * scale}px`,
              }}>
              {(() => {
                let accumulatedAngle = 0;
                return braceletBeads.map((bead, index) => {
                  const isMetal = bead?.type === 'metal';
                  const size = isMetal ? 6 : selectedSize;
                  const angle = beadAngles[index];
                  const offset = (size * scale) / 2;
                  accumulatedAngle += angle;
                  console.log("üé® crystalPlacement[", index, "]:", crystalPlacement[index]);

                  return (
                    <span
                      key={index}
                      onClick={() => {
                        if (!isMetal) handleBeadClick(index);
                      }}
                      className={`${isMetal ? style.pearlSmall : style.pearlBig} ${!isMetal &&
                        Array.isArray(selectedBeadIndexes) &&
                        selectedBeadIndexes.includes(index)
                        ? style.selectedBead
                        : ''
                        }`}
                      style={{
                        width: `${size * scale}px`,
                        height: `${size * scale}px`,
                        position: 'absolute',
                        top: '50%',
                        left: '50%',
                        borderRadius: '50%',
                        transform: `rotate(${accumulatedAngle}deg) translate(${braceletRadius * scale}px) rotate(-${accumulatedAngle}deg) translate(-${offset}px, -${offset}px)`,
                        transformOrigin: '0 0',
                      }}
                    >
                      <div className={style.pearlBase}></div>
                      {(isMetal && selectedMetalImage) || (!isMetal && crystalPlacement[index]) ? (
                        <img
                          src={isMetal ? selectedMetalImage : crystalPlacement[index]}
                          className={style.pearlImage}
                          alt="bead"
                        />
                      ) : null}
                    </span>
                  );
                });

              })()}
              <div className={style.iconBox1}>
                <div
                  className={style.btnDel}
                  onClick={() => setShowConfirmModal(true)}
                ></div>
                <div className={style.btnSave} onClick={handleSaveBracelet}></div>
              </div>
            </div>
            <div className={style.priceBox}>
              <input
                className={style.price}
                type="text"
                placeholder="ÂÉπÈå¢"
                value={braceletPrice === 0 ? "Ëá™ÂãïË®àÁÆóÂÉπÊ†º" : `NT$${braceletPrice}`}
                readOnly
              />
            </div>
          </div>
          <div className={style.align}>
            <div className={style.iconPanelWrapper}>

              {openPanel && (
                <div
                  className={style.panelOverlay}
                >
                  <div
                    className={style.panelContent}
                  >
                    <div className={style.closeBtnWrapper}>
                      <button className={style.closeBtn} onClick={() => {
                        setOpenPanel(null);
                        setActivePanel(null);
                      }}>‚úï</button>
                    </div>



                    {openPanel === "measure" && (
                      <div>
                        <div className={style.panelHeader}>
                          <h2 className={style.panelTitle}>‚ú¶ ÊâãÂúçÊ∏¨Èáè ‚ú¶</h2>
                          <img className={style.decorLine} src="./images/Custom/deco-divider_overlay.png" alt="Ë£ùÈ£æÁ∑ö" />
                        </div>

                        <div className={style.overlayContent}>
                          <p>‚ñ∏ Ê∏¨Èáè‰ΩçÁΩÆÔºöÊâãËÖïÊúÄÁ¥∞Ëôï</p>
                          <div>
                            <div style={{ display: "flex", alignItems: "center", marginBottom: "0.5rem" }}>
                              <img
                                src="./images/Custom/deco-diamaond.png"
                                alt="Ë£ùÈ£æÂúñ"
                                style={{
                                  width: "1rem",
                                  height: "1rem",
                                  marginRight: "0.4rem",
                                }}
                              />
                              <span className={style.panelTitle2} >Á¥ôÊ¢ùÊ∏¨ÈáèÊñπÂºè</span>
                            </div>
                            <p>
                              Ê∫ñÂÇôÂØ¨Á¥Ñ 0.5 ÂÖ¨ÂàÜÁöÑÁ¥ôÊ¢ùÔºåÁπûÊâãËÖï‰∏ÄÂúàÔºåÂú®‰∫§ÊúÉËôïÂÅöË®òËôüÔºåÊî§Âπ≥Á¥ôÊ¢ùÊ∏¨ÈáèÈï∑Â∫¶„ÄÇ
                            </p>
                          </div>
                          <div>
                            <div style={{ display: "flex", alignItems: "center", marginBottom: "0.5rem" }}>
                              <img
                                src="./images/Custom/deco-diamaond.png"
                                alt="Ë£ùÈ£æÂúñ"
                                style={{
                                  width: "1rem",
                                  height: "1rem",
                                  marginRight: "0.4rem",
                                }}
                              />
                              <span className={style.panelTitle2} >ÁöÆÂ∞∫Ê∏¨ÈáèÊñπÂºè</span>
                            </div>
                            <p>
                              ‰ΩøÁî®ÁöÆÂ∞∫ÁπûÊâãËÖï‰∏ÄÂúàÔºåÊ∏¨ÈáèÊâãÂúç„ÄÇ
                            </p>

                            <p style={{ color: "#A67CEB", marginTop: "1rem" }}>
                              Ê∏¨ÈáèÂÆåÁï¢ÔºåÂä† 0.5~1ÂÖ¨ÂàÜÔºå‰ΩøÈÖçÊà¥Êõ¥ËàíÈÅ©‰∏çÁ∑äÁπÉÔºÅ
                            </p>
                          </div>

                        </div>

                      </div>
                    )}

                    {openPanel === "note" && (
                      <div className={style.panelInner}>
                        <div className={style.panelHeader}>
                          <h2 className={style.panelTitle}>‚ú¶ Ê≥®ÊÑè‰∫ãÈ†Ö ‚ú¶</h2>
                          <img className={style.decorLine} src="./images/Custom/deco-divider_overlay.png" alt="Ë£ùÈ£æÁ∑ö" />
                        </div>
                        <div className={style.overlayContent}>
                          <p>‚ñ∏ ÂÆ¢Ë£ΩÂïÜÂìÅÈúÄ ÂÖà‰ªòÊ¨æ ÊâçÊúÉÈñãÂßãË£Ω‰ΩúÔºåË´ãËÄêÂøÉÁ≠âÂæÖË£Ω‰ΩúÊôÇÈñìÁ¥Ñ 5‚Äì7 ÂÄãÂ∑•‰ΩúÂ§©„ÄÇ</p>
                          <p>‚ñ∏ ÂØ¶ÂìÅÈ°èËâ≤ÂèØËÉΩÂõ† Ëû¢ÂπïÈ°ØÁ§∫Ë®≠ÂÆö Áï•ÊúâÂ∑ÆÁï∞ÔºåË´ã‰ª•ÂØ¶ÂìÅÁÇ∫Ê∫ñ„ÄÇ</p>
                          <p>‚ñ∏ Â¶ÇÈúÄ‰øÆÊîπÊâãÂúçÂ∞∫ÂØ∏ÔºåÂ∞áÈÖåÊî∂ÊùêÊñôËàáÂ∑•Êú¨Ë≤ªÔºåË´ã‰∫ãÂÖàËÅØÁπ´ÂÆ¢ÊúçÁ¢∫Ë™çÊòØÂê¶ÂèØË™øÊï¥„ÄÇ</p>
                          <p>‚ñ∏ Â§©ÁÑ∂Ê∞¥Êô∂ÊØèÈ°ÜÈï∑ÂæóÈÉΩ‰∏çÂ§™‰∏ÄÊ®£ÔºåÈ°èËâ≤Ê∑±Ê∑∫„ÄÅÁ¥ãÁêÜÈÉΩÊòØÂ§ßËá™ÁÑ∂Áµ¶ÁöÑÈ©öÂñúÔºåÊ≤íËæ¶Ê≥ïÊåáÂÆöÂñîÔºÅ</p>
                          <p>‚ñ∏ Ëã•ÊúâÊñ∑Ë£ÇÊàñÈùû‰∫∫ÁÇ∫ÁëïÁñµÔºåÂèØÊñº‰∏ÉÊó•ÂÖßËÅØÁπ´ÊàëÂÄë„ÄÇ</p>
                          <p style={{ color: "#A67CEB" }}>
                            Ëã•ÈúÄÁâπÊÆäË®≠Ë®àÔºèÂåÖË£ùÔºèÂ∞∫ÂØ∏ÔºåË´ãÈÅ∏Êìá„ÄåÁâπÂà•Ë®ÇË£Ω„ÄçÂ°´ÂØ´Ë™™Êòé
                          </p>
                        </div>
                      </div>
                    )}

                    {openPanel === "result" && (
                      <div className={style.panelInner}>
                        <div className={style.panelHeader}>
                          <h2 className={style.panelTitle}>‚ú¶ Ê∏¨È©óÁµêÊûú ‚ú¶</h2>
                          <img className={style.decorLine} src="./images/Custom/deco-divider_overlay.png" alt="Ë£ùÈ£æÁ∑ö" />
                        </div>
                        <div className={style.overlayContent}>
                          {!lifePathNumber ? (
                            <button
                              onClick={() => window.open('#/numtest2', '_blank')}
                              className={style.wikiBtn}
                              style={{ marginTop: "1.5rem" }}
                            >
                              ÂâçÂæÄÈÄ≤Ë°åÁîüÂëΩÈùàÊï∏Ê∏¨È©ó
                            </button>
                          ) : (
                            <>
                              <p>‰Ω†ÁöÑÁîüÂëΩÈùàÊï∏ÊòØ <strong style={{ color: "#8750BF" }}>{lifePathNumber} Ëôü‰∫∫</strong>„ÄÇ</p>
                              <p style={{ marginBottom: "1rem" }}>{resultCrystalMap[lifePathNumber]?.description}</p>

                              <h3 className={style.panelTitle2}>‚úß Êé®Ëñ¶Ê∞¥Êô∂ ‚úß</h3>
                              {resultCrystalMap[lifePathNumber]?.crystals.map((crystal, index) => (
                                <div
                                  key={index}
                                  style={{
                                    display: "flex",
                                    alignItems: "center",
                                    gap: "1rem",
                                    marginBottom: "1rem"
                                  }}
                                >
                                  <img
                                    src={crystal.image}
                                    alt={crystal.name}
                                    style={{
                                      width: "3.5rem",
                                      height: "3.5rem",
                                      borderRadius: "999px",
                                      objectFit: "cover"
                                    }}
                                  />
                                  <div>
                                    <p style={{ fontWeight: "500", color: "#8750BF" }}>
                                      „Äê{crystal.category}„Äë {crystal.name} {crystal.en}
                                    </p>
                                    <p style={{ fontSize: "0.8rem", color: "#585858" }}>{crystal.desc}</p>
                                  </div>
                                </div>
                              ))}

                              <button
                                className={style.wikiBtn}
                                onClick={() => {
                                  sessionStorage.removeItem("lifePathNumber");
                                  sessionStorage.removeItem("numtest2-completed");
                                  window.open('#/numtest2', '_blank');
                                }}
                              >
                                ÈáçÊñ∞Ê∏¨È©ó
                              </button>
                            </>
                          )}
                        </div>
                      </div>
                    )}

                    {openPanel === "wiki" && (
                      <div className={style.panelInner}>
                        <div className={style.panelHeader}>
                          <h2 className={style.panelTitle}>‚ú¶ Ê∞¥Êô∂ÂàÜÈ°û ‚ú¶</h2>
                          <img className={style.decorLine} src="./images/Custom/deco-divider_overlay.png" alt="Ë£ùÈ£æÁ∑ö" />
                        </div>
                        <div className={style.overlayContent}>
                          {Object.entries(categorizedCrystalInfo).map(([category, crystals]) => (
                            <div key={category} style={{ marginBottom: "1.2rem" }}>
                              <div
                                onClick={() => toggleCategory(category)}
                                style={{
                                  display: "flex",
                                  alignItems: "center",
                                  cursor: "pointer",
                                  fontWeight: "600",
                                  color: "#8750BF",
                                  fontSize: "1rem",
                                  marginBottom: "0.3rem",
                                  fontFamily: "'Noto Sans TC', sans-serif",
                                  gap: "0.2rem",
                                  borderBottom: "1px solid #rgb(159, 116, 202)",
                                  paddingBottom: "0.5rem"
                                }}
                              >
                                <span>{expandedCategories.includes(category) ? "‚ñæ" : "‚ñ∏"}</span>
                                ‚úß {category} ‚úß
                              </div>

                              {expandedCategories.includes(category) && (
                                <div style={{ display: "flex", flexDirection: "column", gap: "0.75rem", marginLeft: "0.5rem" }}>
                                  {crystals.map((crystal, idx) => (
                                    <div key={idx} style={{ display: "flex", alignItems: "center", gap: "0.75rem" }}>
                                      <img
                                        src={crystal.image}
                                        alt={`${crystal.name} ÂúñÁâá`}
                                        style={{
                                          width: "3rem",
                                          height: "3rem",
                                          borderRadius: "999rem",
                                          objectFit: "cover",
                                        }}
                                      />
                                      <div>
                                        <p style={{ margin: 0, fontWeight: 500, fontSize: 14, color: "#8750BF" }}>„Äê{crystal.name}„Äë</p>
                                        <p style={{ fontSize: "0.75rem", color: "#585858", paddingLeft: "0.5rem" }}>
                                          {crystal.desc}
                                        </p>
                                      </div>
                                    </div>
                                  ))}
                                </div>
                              )}
                            </div>
                          ))}

                          <button
                            onClick={() => window.open('#/KnowledgeCrystal', '_blank')}
                            className={style.wikiBtn}
                          >
                            ÂâçÂæÄÊ∞¥Êô∂Â∞èÁôæÁßëÊü•ÁúãÊõ¥Â§ö
                          </button>
                        </div>
                      </div>
                    )}
                    {openPanel === "custom" && (
                      <div className={style.panelInner}>
                        <div className={style.panelHeader}>
                          <h2 className={style.panelTitle}>‚ú¶ ÁâπÂà•Ë®ÇË£Ω ‚ú¶</h2>
                          <img className={style.decorLine} src="./images/Custom/deco-divider_overlay.png" alt="Ë£ùÈ£æÁ∑ö" />
                        </div>
                        <div className={style.overlayContent}>
                          <p style={{ marginBottom: "0.5rem" }}>Ë´ãÁïô‰∏ãÊÇ®ÁöÑÁâπÊÆäË®ÇË£ΩÈúÄÊ±ÇÔºåÊàëÂÄëÂ∞áÁõ°Âø´ËÅØÁπ´ÊÇ®Ôºö</p>

                          <textarea
                            className={style.customTextarea}
                            placeholder="Ë´ãËº∏ÂÖ•ÊÇ®ÊÉ≥Ë™øÊï¥ÁöÑÂ∞∫ÂØ∏„ÄÅÊ∞¥Êô∂Ê¨æÂºè„ÄÅÁâπÊÆäË®≠Ë®àÈúÄÊ±Ç‚Ä¶"
                            value={customRequest}
                            onChange={(e) => setCustomRequest(e.target.value)}
                          />

                          <button
                            className={style.wikiBtn}
                            onClick={() => {
                              if (customRequest.trim()) {
                                alert("ÁâπÂà•Ë®ÇË£ΩÈúÄÊ±ÇÂ∑≤ÈÄÅÂá∫ÔºåÊàëÂÄëÂ∞áÊñº‰∫îÂÄãÂ∑•‰ΩúÂ§©ÂÖßËàáÊÇ®ËÅØÁπ´ÔºÅ");
                                setCustomRequest("");
                                setOpenPanel(null);
                              } else {
                                alert("Ë´ãÂÖàÂ°´ÂØ´ÊÇ®ÁöÑË®ÇË£ΩÈúÄÊ±ÇÂÖßÂÆπÔºÅ");
                              }
                            }}
                          >
                            ÈÄÅÂá∫ÈúÄÊ±Ç
                          </button>
                        </div>
                      </div>
                    )}


                  </div>

                </div>
              )}
              <div className={style.iconBox2}>

                <div className={style.icon1Box}>
                  <div className={style.icon1} onClick={() => handlePanelClick("measure")}>
                    <div className={`${style.iconBtn1} ${activePanel === "measure" ? style.active : ""}`}></div>
                    <p>ÊâãÂúçÊ∏¨Èáè</p>
                  </div>
                  <hr className={style.line2} />

                  <div className={style.icon1} onClick={() => handlePanelClick("result")}>
                    <div className={`${style.iconBtn2} ${activePanel === "result" ? style.active : ""}`}></div>
                    <p>Ê∏¨È©óÁµêÊûú</p>
                  </div>
                  <hr className={style.line2} />

                  <div className={style.icon1} onClick={() => handlePanelClick("wiki")}>
                    <div className={`${style.iconBtn3} ${activePanel === "wiki" ? style.active : ""}`}></div>
                    <p>Ê∞¥Êô∂ÁôæÁßë</p>
                  </div>
                  <hr className={style.line2} />

                  <div className={style.icon1} onClick={() => handlePanelClick("note")}>
                    <div className={`${style.iconBtn4} ${activePanel === "note" ? style.active : ""}`}></div>
                    <p>Ê≥®ÊÑè‰∫ãÈ†Ö</p>
                  </div>
                  <hr className={style.line2} />

                  <div className={style.icon1} onClick={() => handlePanelClick("custom")}>
                    <div className={`${style.iconBtn5} ${activePanel === "custom" ? style.active : ""}`}></div>
                    <p>ÁâπÂà•Ë®ÇË£Ω</p>
                  </div>
                </div>

              </div>
            </div>
            {showConfirmModal && (
              <div className={style.modalOverlay}>
                <div className={style.modalContent}>
                  <p>Á¢∫ÂÆöË¶ÅÊ∏ÖÈô§Êï¥Ê¢ùÊâãÈçäÂóéÔºü</p>
                  <div className={style.modalButtons}>
                    <button className={style.btnConfirm} onClick={handleConfirmClear}>Á¢∫Ë™ç</button>
                    <button onClick={() => setShowConfirmModal(false)}>ÂèñÊ∂à</button>
                  </div>
                </div>
              </div>
            )}
            {showCustomModal && (
              <div className={style.modalOverlay}>
                <div className={style.modalContent}>
                  <p>ÊâãÈçäË≥áÊñôÂÑ≤Â≠òÊàêÂäüÔºÅ</p>
                  <button className={style.btnConfirm} onClick={() => setShowCustomModal(false)}>Á¢∫Ë™ç</button>
                </div>
              </div>
            )}

            {showIncompleteModal && (
              <div className={style.modalOverlay}>
                <div className={style.modalContent}>
                  <p>Ë´ãÂÖàÂÆåÊàêÊï¥Ê¢ùÊâãÈçäÁöÑË®≠Ë®àÔºåÊâçËÉΩÂä†ÂÖ•Ë≥ºÁâ©ËªäÔºÅ</p>
                  <button className={style.btnConfirm} onClick={() => setShowIncompleteModal(false)}>Á¢∫Ë™ç</button>
                </div>
              </div>
            )}


            <div
              className={style.icon2}
              onClick={handleAddToCart}
            >
            </div>
          </div>
        </div>





        {showCartModal && (
          <div className={style.modalOverlay}>
            <div className={style.modalContentLarge}>
              <div className={style.previewtopic}>
                <h2>‚ú¶ Á¢∫Ë™çÂÆ¢Ë£ΩÂåñÊâãÈçä ‚ú¶</h2>
              </div>

              <img src={previewImage} alt="ÊâãÈçäÈ†êË¶ΩÂúñ" className={style.previewImg} />

              <div className={style.infoBox}>
                <p><strong>ÂêçÁ®± | </strong>{braceletName || 'Â∞öÊú™ÂëΩÂêç'}</p>
                <p><strong>Â∞∫ÂØ∏ | </strong>ÊâãÂúç {wristSize}cm   ‰∏≤Áè†{selectedSize}mm</p>
                <p><strong>ÂÉπÊ†º | </strong>NT${braceletPrice}</p>
              </div>

              {/* Ê≥®ÊÑè‰∫ãÈ†ÖÂçÄÂ°ä */}
              <div className={style.noticeBox}>
                <p>Ôºä Êú¨ÂïÜÂìÅÁÇ∫Á¥îÂÆ¢Ë£ΩÂåñË®≠Ë®àÔºå‰∏ãÂñÆÂæåÊÅï‰∏çÈÄÄÊèõ Ôºä</p>
                <label className={style.checkboxLabel}>
                  <input
                    type="checkbox"
                    checked={agreedToTerms}
                    onChange={(e) => {
                      setAgreedToTerms(e.target.checked);
                      if (e.target.checked) {
                        setAgreeError(false); // ÂãæÈÅ∏ÂæåÊ∏ÖÈô§ÈåØË™§ÊèêÁ§∫
                      }
                    }}
                  />
                  ÊàëÂ∑≤Èñ±ËÆÄ‰∏¶ÂêåÊÑèÊ≥®ÊÑè‰∫ãÈ†Ö
                </label>
                {agreeError && (
                  <p className={style.errorText}>Ë´ãÂãæÈÅ∏ ÂêåÊÑèË≥ºÁâ©Ê≥®ÊÑè‰∫ãÈ†Ö</p>
                )}
              </div>

              {/* ÊåâÈàïÂçÄÂ°ä */}
              <div className={style.modalButtons}>
                <button
                  className={style.btnConfirm}
                  // onClick={() => {
                  //   if (!agreedToTerms) {
                  //     setAgreeError(true);
                  //     return;
                  //   }

                  //   setAgreeError(false);

                  //   const existingCart = JSON.parse(localStorage.getItem('cart')) || [];
                  //   existingCart.push({
                  //     braceletName,
                  //     wristSize,
                  //     selectedSize,
                  //     crystalPlacement,
                  //     selectedMetalImage,
                  //     braceletPrice,
                  //     previewImage,
                  //     createdAt: new Date().toISOString(),
                  //   });
                  //   localStorage.setItem('cart', JSON.stringify(existingCart));
                  //   setShowCartModal(false);
                  //   setAgreedToTerms(false);
                  // }}

                  // ‰∏≤Êé•Ë≥ºÁâ©Ëªä
                  onClick={async () => {
                    if (!agreedToTerms) {
                      setAgreeError(true);
                      return;
                    }
                    setAgreeError(false);

                    // 1. ËΩâÂá∫‰πæÊ∑®ÊâãÈçäÂúñ
                    const image = await renderBraceletToImage({
                      braceletBeads,
                      crystalPlacement,
                      selectedMetalImage,
                      selectedSize,
                      wristSize,
                    });

                    // 2. ÊîæÈÄ≤ CartContext
                    addToCart({
                      isCustom: true,
                      name: braceletName || 'ÂÆ¢Ë£ΩÂåñÊâãÈçä',
                      size: selectedSize,
                      wrist: wristSize,
                      quantity: 1,
                      image,
                      price: braceletPrice,   // ‰æÜÊ∫êÔºöÂâõÂâõÈÇ£ÂÄãÂáΩÂºè
                    });

                    // 3. ÈóúÂΩàÁ™ó‰∏¶Ë∑≥ËΩâË≥ºÁâ©Ëªä
                    setShowCartModal(false);
                    navigate('/shoppingcart');
                  }}

                >
                  Á¢∫Ë™çÂä†ÂÖ•Ë≥ºÁâ©Ëªä
                </button>
                <button onClick={() => setShowCartModal(false)}>ÂèñÊ∂à</button>
              </div>
            </div>
          </div>

        )}


        {showCrystalGuide && (
          <div className={style.crystalGuideOverlay}>
            <div className={style.crystalGuideContent}>
              <h3>‚ú¶ Â¶Ç‰ΩïË®≠Ë®àÔºü ‚ú¶</h3>
              <img className={style.decorLine} src="./images/ShoppingCart/finshed_deco.svg" alt="Ë£ùÈ£æÁ∑ö" />
              <ul>
                <li>
                  <p>1. ÈªûÈÅ∏ÊâãÈçä‰∏äÁöÑÂ§ßÈ°ÜÁè†Áè†ÂÜçÈªûÊ∞¥Êô∂(ÂèØÂ§öÈÅ∏)</p>
                </li>

                <li>
                  <p>2. ÂÖàÈªûÊ∞¥Êô∂ÂÜçÈªûÊâãÈçä‰∏äÁöÑ‰∏ÄÂÄãÂ§ßÈ°ÜÁè†Áè†</p>
                </li>

                <li>
                  <p>Â∞±ËÉΩÊääÂñúÊ≠°ÁöÑÊ∞¥Êô∂Â•ó‰∏äÂéªÂõâÔºÅ</p>
                </li>
              </ul>

              <button
                className={style.guideCloseBtn}
                onClick={() => setShowCrystalGuide(false)}
              >
                Áü•ÈÅì‰∫Ü
              </button>
            </div>
          </div>
        )}
      </main>
      <CopyrightNotice />
    </>
  )
}
